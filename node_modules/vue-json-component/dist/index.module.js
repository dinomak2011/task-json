import { __assign } from 'tslib';
import Vue from 'vue';

function _typeof(obj) {
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

var script = Vue.extend({
  name: 'json-view-item',
  data: function data() {
    return {
      open: this.data.depth < this.maxDepth
    };
  },
  props: {
    data: {
      required: true,
      type: Object
    },
    maxDepth: {
      type: Number,
      required: false,
      default: 1
    },
    canSelect: {
      type: Boolean,
      required: false,
      default: false
    }
  },
  methods: {
    toggleOpen: function toggleOpen() {
      this.open = !this.open;
    },
    clickEvent: function clickEvent(data) {
      this.$emit('selected', {
        key: data.key,
        value: data.value,
        path: data.path
      });
    },
    bubbleSelected: function bubbleSelected(data) {
      this.$emit('selected', data);
    },
    getKey: function getKey(value) {
      if (!isNaN(value.key)) {
        return value.key + ':';
      } else {
        return '"' + value.key + '":';
      }
    },
    getValueStyle: function getValueStyle(value) {
      var type = _typeof(value);

      switch (type) {
        case 'string':
          return {
            color: 'var(--vjc-string-color)'
          };

        case 'number':
          return {
            color: 'var(--vjc-number-color)'
          };

        case 'boolean':
          return {
            color: 'var(--vjc-boolean-color)'
          };

        case 'object':
          return {
            color: 'var(--vjc-null-color)'
          };

        case 'undefined':
          return {
            color: 'var(--vjc-null-color)'
          };

        default:
          return {
            color: 'var(--vjc-valueKey-color)'
          };
      }
    }
  },
  computed: {
    classes: function classes() {
      return {
        'chevron-arrow': true,
        opened: this.open
      };
    },
    valueClasses: function valueClasses() {
      return {
        'value-key': true,
        'can-select': this.canSelect
      };
    },
    lengthString: function lengthString() {
      if (this.data.type === 'array') {
        return this.data.length === 1 ? this.data.length + ' element' : this.data.length + ' elements';
      }

      return this.data.length === 1 ? this.data.length + ' property' : this.data.length + ' properties';
    },
    dataValue: function dataValue() {
      if (typeof this.data.value === 'undefined') {
        return 'undefined';
      }

      return JSON.stringify(this.data.value);
    }
  }
});

/* script */
var __vue_script__ = script;
/* template */

var __vue_render__ = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('div', {
    staticClass: "json-view-item"
  }, [_vm.data.type === 'object' || _vm.data.type === 'array' ? _c('div', [_c('button', {
    staticClass: "data-key",
    attrs: {
      "aria-expanded": _vm.open ? 'true' : 'false'
    },
    on: {
      "click": function click($event) {
        $event.stopPropagation();
        return _vm.toggleOpen($event);
      }
    }
  }, [_c('div', {
    class: _vm.classes
  }), _vm._v("\n      " + _vm._s(_vm.data.key) + ":\n      "), _c('span', {
    staticClass: "properties"
  }, [_vm._v(_vm._s(_vm.lengthString))])]), _vm._v(" "), _vm._l(_vm.data.children, function (child) {
    return _c('json-view-item', {
      directives: [{
        name: "show",
        rawName: "v-show",
        value: _vm.open,
        expression: "open"
      }],
      key: _vm.getKey(child),
      attrs: {
        "data": child,
        "maxDepth": _vm.maxDepth,
        "canSelect": _vm.canSelect
      },
      on: {
        "selected": _vm.bubbleSelected
      }
    });
  })], 2) : _vm._e(), _vm._v(" "), _vm.data.type === 'value' ? _c('div', {
    class: _vm.valueClasses,
    attrs: {
      "role": _vm.canSelect ? 'button' : undefined,
      "tabindex": _vm.canSelect ? '0' : undefined
    },
    on: {
      "click": function click($event) {
        return _vm.clickEvent(_vm.data);
      },
      "keyup": [function ($event) {
        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) {
          return null;
        }

        return _vm.clickEvent(_vm.data);
      }, function ($event) {
        if (!$event.type.indexOf('key') && _vm._k($event.keyCode, "space", 32, $event.key, [" ", "Spacebar"])) {
          return null;
        }

        return _vm.clickEvent(_vm.data);
      }]
    }
  }, [_c('span', {
    staticClass: "value-key"
  }, [_vm._v(_vm._s(_vm.data.key) + ":")]), _vm._v(" "), _c('span', {
    style: _vm.getValueStyle(_vm.data.value)
  }, [_vm._v("\n      " + _vm._s(_vm.dataValue) + "\n    ")])]) : _vm._e()]);
};

var __vue_staticRenderFns__ = [];
/* style */

var __vue_inject_styles__ = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-c45632d2_0", {
    source: ".json-view-item[data-v-c45632d2]:not(.root-item){margin-left:15px}.value-key[data-v-c45632d2]{color:var(--vjc-valueKey-color);font-weight:600;margin-left:10px;border-radius:2px;white-space:nowrap;padding:5px 5px 5px 10px}.value-key.can-select[data-v-c45632d2]{cursor:pointer}.value-key.can-select[data-v-c45632d2]:hover{background-color:rgba(0,0,0,.08)}.value-key.can-select[data-v-c45632d2]:focus{outline:2px solid var(--vjc-hover-color)}.data-key[data-v-c45632d2]{font-size:100%;font-family:inherit;border:0;padding:0;background-color:transparent;width:100%;color:var(--vjc-key-color);display:flex;align-items:center;border-radius:2px;font-weight:600;cursor:pointer;white-space:nowrap;padding:5px}.data-key[data-v-c45632d2]:hover{background-color:var(--vjc-hover-color)}.data-key[data-v-c45632d2]:focus{outline:2px solid var(--vjc-hover-color)}.data-key[data-v-c45632d2]::-moz-focus-inner{border:0}.data-key .properties[data-v-c45632d2]{font-weight:300;opacity:.9;margin-left:4px;user-select:none}.chevron-arrow[data-v-c45632d2]{flex-shrink:0;border-right:4px solid var(--vjc-arrow-color);border-bottom:4px solid var(--vjc-arrow-color);width:var(--vjc-arrow-size);height:var(--vjc-arrow-size);margin-right:20px;margin-left:5px;transform:rotate(-45deg)}.chevron-arrow.opened[data-v-c45632d2]{margin-top:-3px;transform:rotate(45deg)}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__ = "data-v-c45632d2";
/* module identifier */

var __vue_module_identifier__ = undefined;
/* functional template */

var __vue_is_functional_template__ = false;
/* component normalizer */

function __vue_normalize__(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
  var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

  component.__file = "JSONViewItem.vue";

  if (!component.render) {
    component.render = template.render;
    component.staticRenderFns = template.staticRenderFns;
    component._compiled = true;
    if (functional) component.functional = true;
  }

  component._scopeId = scope;

  {
    var hook;

    if (style) {
      hook = function hook(context) {
        style.call(this, createInjector(context));
      };
    }

    if (hook !== undefined) {
      if (component.functional) {
        // register for functional component in vue file
        var originalRender = component.render;

        component.render = function renderWithStyleInjection(h, context) {
          hook.call(context);
          return originalRender(h, context);
        };
      } else {
        // inject component registration as beforeCreate hook
        var existing = component.beforeCreate;
        component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
      }
    }
  }

  return component;
}
/* style inject */


function __vue_create_injector__() {
  var head = document.head || document.getElementsByTagName('head')[0];
  var styles = __vue_create_injector__.styles || (__vue_create_injector__.styles = {});
  var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
  return function addStyle(id, css) {
    if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) return; // SSR styles are present.

    var group = isOldIE ? css.media || 'default' : id;
    var style = styles[group] || (styles[group] = {
      ids: [],
      parts: [],
      element: undefined
    });

    if (!style.ids.includes(id)) {
      var code = css.source;
      var index = style.ids.length;
      style.ids.push(id);

      if (css.map) {
        // https://developer.chrome.com/devtools/docs/javascript-debugging
        // this makes source maps inside style tags work properly in Chrome
        code += '\n/*# sourceURL=' + css.map.sources[0] + ' */'; // http://stackoverflow.com/a/26603875

        code += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + ' */';
      }

      if (isOldIE) {
        style.element = style.element || document.querySelector('style[data-group=' + group + ']');
      }

      if (!style.element) {
        var el = style.element = document.createElement('style');
        el.type = 'text/css';
        if (css.media) el.setAttribute('media', css.media);

        if (isOldIE) {
          el.setAttribute('data-group', group);
          el.setAttribute('data-next-index', '0');
        }

        head.appendChild(el);
      }

      if (isOldIE) {
        index = parseInt(style.element.getAttribute('data-next-index'));
        style.element.setAttribute('data-next-index', index + 1);
      }

      if (style.element.styleSheet) {
        style.parts.push(code);
        style.element.styleSheet.cssText = style.parts.filter(Boolean).join('\n');
      } else {
        var textNode = document.createTextNode(code);
        var nodes = style.element.childNodes;
        if (nodes[index]) style.element.removeChild(nodes[index]);
        if (nodes.length) style.element.insertBefore(textNode, nodes[index]);else style.element.appendChild(textNode);
      }
    }
  };
}
/* style inject SSR */


var JSONViewItem = __vue_normalize__({
  render: __vue_render__,
  staticRenderFns: __vue_staticRenderFns__
}, __vue_inject_styles__, __vue_script__, __vue_scope_id__, __vue_is_functional_template__, __vue_module_identifier__, __vue_create_injector__, undefined);

var isDarkMediaQuery = window.matchMedia('(prefers-color-scheme: dark)').matches;
var script$1 = Vue.extend({
  name: 'json-view',
  props: {
    data: {
      required: true
    },
    rootKey: {
      type: String,
      required: false,
      default: 'root'
    },
    maxDepth: {
      type: Number,
      required: false,
      default: 1
    },
    colorScheme: {
      type: String,
      required: false,
      default: 'light'
    }
  },
  components: {
    'json-view-item': JSONViewItem
  },
  methods: {
    build: function build(key, val, depth, path, includeKey) {
      if (this.isObject(val)) {
        // Build Object
        var children = [];

        for (var _i = 0, _a = Object.entries(val); _i < _a.length; _i++) {
          var _b = _a[_i],
              childKey = _b[0],
              childValue = _b[1];
          children.push(this.build(childKey, childValue, depth + 1, includeKey ? "" + path + key + "." : "" + path, true));
        }

        return {
          key: key,
          type: 'object',
          depth: depth,
          path: path,
          length: children.length,
          children: children
        };
      } else if (this.isArray(val)) {
        // Build Array
        var children = [];

        for (var i = 0; i < val.length; i++) {
          children.push(this.build(i.toString(), val[i], depth + 1, includeKey ? "" + path + key + "[" + i + "]." : "" + path, false));
        }

        return {
          key: key,
          type: 'array',
          depth: depth,
          path: path,
          length: children.length,
          children: children
        };
      } else {
        // Build Value
        return {
          key: key,
          type: 'value',
          path: includeKey ? path + key : path.slice(0, -1),
          depth: depth,
          value: val
        };
      }
    },
    isObject: function isObject(val) {
      return _typeof(val) === 'object' && val !== null && !this.isArray(val);
    },
    isArray: function isArray(val) {
      return Array.isArray(val);
    },
    itemSelected: function itemSelected(data) {
      this.$emit('selected', data);
    }
  },
  computed: {
    parsed: function parsed() {
      if (_typeof(this.data) === 'object') {
        return this.build(this.rootKey, __assign({}, this.data), 0, '', true);
      }

      return {
        key: this.rootKey,
        type: 'value',
        path: '',
        depth: 0,
        value: this.data
      };
    },
    hasSelectedListener: function hasSelectedListener() {
      return Boolean(this.$listeners && this.$listeners.selected);
    }
  }
});

/* script */
var __vue_script__$1 = script$1;
/* template */

var __vue_render__$1 = function __vue_render__() {
  var _vm = this;

  var _h = _vm.$createElement;

  var _c = _vm._self._c || _h;

  return _c('json-view-item', {
    class: [{
      'root-item': true,
      dark: _vm.colorScheme === 'dark'
    }],
    attrs: {
      "data": _vm.parsed,
      "maxDepth": _vm.maxDepth,
      "canSelect": _vm.hasSelectedListener
    },
    on: {
      "selected": _vm.itemSelected
    }
  });
};

var __vue_staticRenderFns__$1 = [];
/* style */

var __vue_inject_styles__$1 = function __vue_inject_styles__(inject) {
  if (!inject) return;
  inject("data-v-1c053202_0", {
    source: ".root-item[data-v-1c053202]{--vjc-key-color:#0977e6;--vjc-valueKey-color:#073642;--vjc-string-color:#268bd2;--vjc-number-color:#2aa198;--vjc-boolean-color:#cb4b16;--vjc-null-color:#6c71c4;--vjc-arrow-size:6px;--vjc-arrow-color:#444;--vjc-hover-color:rgba(0, 0, 0, 0.2);margin-left:0;width:100%;height:auto}.root-item.dark[data-v-1c053202]{--vjc-key-color:#80d8ff;--vjc-valueKey-color:#fdf6e3;--vjc-hover-color:rgba(255, 255, 255, 0.2);--vjc-arrow-color:#fdf6e3}",
    map: undefined,
    media: undefined
  });
};
/* scoped */


var __vue_scope_id__$1 = "data-v-1c053202";
/* module identifier */

var __vue_module_identifier__$1 = undefined;
/* functional template */

var __vue_is_functional_template__$1 = false;
/* component normalizer */

function __vue_normalize__$1(template, style, script, scope, functional, moduleIdentifier, createInjector, createInjectorSSR) {
  var component = (typeof script === 'function' ? script.options : script) || {}; // For security concerns, we use only base name in production mode.

  component.__file = "JSONView.vue";

  if (!component.render) {
    component.render = template.render;
    component.staticRenderFns = template.staticRenderFns;
    component._compiled = true;
    if (functional) component.functional = true;
  }

  component._scopeId = scope;

  {
    var hook;

    if (style) {
      hook = function hook(context) {
        style.call(this, createInjector(context));
      };
    }

    if (hook !== undefined) {
      if (component.functional) {
        // register for functional component in vue file
        var originalRender = component.render;

        component.render = function renderWithStyleInjection(h, context) {
          hook.call(context);
          return originalRender(h, context);
        };
      } else {
        // inject component registration as beforeCreate hook
        var existing = component.beforeCreate;
        component.beforeCreate = existing ? [].concat(existing, hook) : [hook];
      }
    }
  }

  return component;
}
/* style inject */


function __vue_create_injector__$1() {
  var head = document.head || document.getElementsByTagName('head')[0];
  var styles = __vue_create_injector__$1.styles || (__vue_create_injector__$1.styles = {});
  var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
  return function addStyle(id, css) {
    if (document.querySelector('style[data-vue-ssr-id~="' + id + '"]')) return; // SSR styles are present.

    var group = isOldIE ? css.media || 'default' : id;
    var style = styles[group] || (styles[group] = {
      ids: [],
      parts: [],
      element: undefined
    });

    if (!style.ids.includes(id)) {
      var code = css.source;
      var index = style.ids.length;
      style.ids.push(id);

      if (css.map) {
        // https://developer.chrome.com/devtools/docs/javascript-debugging
        // this makes source maps inside style tags work properly in Chrome
        code += '\n/*# sourceURL=' + css.map.sources[0] + ' */'; // http://stackoverflow.com/a/26603875

        code += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + ' */';
      }

      if (isOldIE) {
        style.element = style.element || document.querySelector('style[data-group=' + group + ']');
      }

      if (!style.element) {
        var el = style.element = document.createElement('style');
        el.type = 'text/css';
        if (css.media) el.setAttribute('media', css.media);

        if (isOldIE) {
          el.setAttribute('data-group', group);
          el.setAttribute('data-next-index', '0');
        }

        head.appendChild(el);
      }

      if (isOldIE) {
        index = parseInt(style.element.getAttribute('data-next-index'));
        style.element.setAttribute('data-next-index', index + 1);
      }

      if (style.element.styleSheet) {
        style.parts.push(code);
        style.element.styleSheet.cssText = style.parts.filter(Boolean).join('\n');
      } else {
        var textNode = document.createTextNode(code);
        var nodes = style.element.childNodes;
        if (nodes[index]) style.element.removeChild(nodes[index]);
        if (nodes.length) style.element.insertBefore(textNode, nodes[index]);else style.element.appendChild(textNode);
      }
    }
  };
}
/* style inject SSR */


var JSONView = __vue_normalize__$1({
  render: __vue_render__$1,
  staticRenderFns: __vue_staticRenderFns__$1
}, __vue_inject_styles__$1, __vue_script__$1, __vue_scope_id__$1, __vue_is_functional_template__$1, __vue_module_identifier__$1, __vue_create_injector__$1, undefined);

var index = {
  install: function install(Vue, options) {
    Vue.component('json-view', JSONView);
  }
};

export default index;
export { JSONView };
//# sourceMappingURL=index.module.js.map
